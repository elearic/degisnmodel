策略模式 strategy pattern 也叫 政策模式 policy pattern

它是将定义的算法家族、分别封装起来，让它们之间可以相互替换，从而让算法的变化不会影响到使用算法的用户。属于行为型模式

策略模式使用的就是面向对象的继承和多态机制，从而实现统一行为在不同场景下具备不同实现。


策略模式的应用场景：

    策略模式在生活场景中应用也非常多，比如一个人的交税比率与他的工资有关，不同的工资水平对应不同的税率。再比如我们再互联网移动支付的
    大背景下，每次下单后付款前，需要选择支付方式。

策略模式可以解决在有多种算法相似的情况下，使用if...else 或 switch...case 所带来的复杂性和臃肿性。在日常业务开发中，策略模式使用于以下场景

1、针对同一类型问题，有多种处理方式，每一种都能独立解决问题
2、算法需要自由切换的场景
3、需要屏蔽算法规则的场景

策略模式主要包含三种角色：

a、上下文角色(context) : 用来操作策略的上下文环境，屏蔽高层模块(客户端)对策略，算法的直接访问，封装可能存在的变化
b、抽象策略角色(strategy) : 规定策略或算法的行为
c、具体策略角色(concreteStrategy) : 具体的策略或算法实现

注意：策略模式中的上下文环境，其职责本来是隔离客户端与策略类的耦合，让客户端完全与上下文环境沟通，无需关系具体策略
